/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: backend/forms.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../lib";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export enum FormFieldKind {
    Age = 0,
    ConfirmEvent = 1,
    Email = 2,
    Gender = 3,
    PreferredName = 4
}
export class GetFormParams extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        language?: dependency_1.SupportedLanguages;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("language" in data && data.language != undefined) {
                this.language = data.language;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get language() {
        return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.SupportedLanguages.en_GB) as dependency_1.SupportedLanguages;
    }
    set language(value: dependency_1.SupportedLanguages) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        language?: dependency_1.SupportedLanguages;
    }): GetFormParams {
        const message = new GetFormParams({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.language != null) {
            message.language = data.language;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            language?: dependency_1.SupportedLanguages;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.language != null) {
            data.language = this.language;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.language != dependency_1.SupportedLanguages.en_GB)
            writer.writeEnum(2, this.language);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetFormParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetFormParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.language = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetFormParams {
        return GetFormParams.deserialize(bytes);
    }
}
export class FormSubmissionData extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({} & (({
        value?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_value() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _value() {
        const cases: {
            [index: number]: "none" | "value";
        } = {
            0: "none",
            2: "value"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        value?: string;
    }): FormSubmissionData {
        const message = new FormSubmissionData({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_value)
            writer.writeString(2, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormSubmissionData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormSubmissionData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FormSubmissionData {
        return FormSubmissionData.deserialize(bytes);
    }
}
export class FormSubmission extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        where?: GetFormParams;
        data?: FormSubmissionData[];
        sourceHash?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("where" in data && data.where != undefined) {
                this.where = data.where;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("sourceHash" in data && data.sourceHash != undefined) {
                this.sourceHash = data.sourceHash;
            }
        }
    }
    get where() {
        return pb_1.Message.getWrapperField(this, GetFormParams, 1) as GetFormParams;
    }
    set where(value: GetFormParams) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_where() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get data() {
        return pb_1.Message.getRepeatedWrapperField(this, FormSubmissionData, 2) as FormSubmissionData[];
    }
    set data(value: FormSubmissionData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get sourceHash() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set sourceHash(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        where?: ReturnType<typeof GetFormParams.prototype.toObject>;
        data?: ReturnType<typeof FormSubmissionData.prototype.toObject>[];
        sourceHash?: string;
    }): FormSubmission {
        const message = new FormSubmission({});
        if (data.where != null) {
            message.where = GetFormParams.fromObject(data.where);
        }
        if (data.data != null) {
            message.data = data.data.map(item => FormSubmissionData.fromObject(item));
        }
        if (data.sourceHash != null) {
            message.sourceHash = data.sourceHash;
        }
        return message;
    }
    toObject() {
        const data: {
            where?: ReturnType<typeof GetFormParams.prototype.toObject>;
            data?: ReturnType<typeof FormSubmissionData.prototype.toObject>[];
            sourceHash?: string;
        } = {};
        if (this.where != null) {
            data.where = this.where.toObject();
        }
        if (this.data != null) {
            data.data = this.data.map((item: FormSubmissionData) => item.toObject());
        }
        if (this.sourceHash != null) {
            data.sourceHash = this.sourceHash;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_where)
            writer.writeMessage(1, this.where, () => this.where.serialize(writer));
        if (this.data.length)
            writer.writeRepeatedMessage(2, this.data, (item: FormSubmissionData) => item.serialize(writer));
        if (this.sourceHash.length)
            writer.writeString(3, this.sourceHash);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormSubmission {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormSubmission();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.where, () => message.where = GetFormParams.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 2, FormSubmissionData.deserialize(reader), FormSubmissionData));
                    break;
                case 3:
                    message.sourceHash = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FormSubmission {
        return FormSubmission.deserialize(bytes);
    }
}
export class FormSubmissionResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accepted?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accepted" in data && data.accepted != undefined) {
                this.accepted = data.accepted;
            }
        }
    }
    get accepted() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set accepted(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        accepted?: boolean;
    }): FormSubmissionResult {
        const message = new FormSubmissionResult({});
        if (data.accepted != null) {
            message.accepted = data.accepted;
        }
        return message;
    }
    toObject() {
        const data: {
            accepted?: boolean;
        } = {};
        if (this.accepted != null) {
            data.accepted = this.accepted;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accepted != false)
            writer.writeBool(1, this.accepted);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormSubmissionResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormSubmissionResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accepted = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FormSubmissionResult {
        return FormSubmissionResult.deserialize(bytes);
    }
}
export class Form extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        banner?: string;
        description?: string;
        name?: string;
        template?: Template;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("banner" in data && data.banner != undefined) {
                this.banner = data.banner;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("template" in data && data.template != undefined) {
                this.template = data.template;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get banner() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set banner(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get template() {
        return pb_1.Message.getWrapperField(this, Template, 5) as Template;
    }
    set template(value: Template) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_template() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        id?: string;
        banner?: string;
        description?: string;
        name?: string;
        template?: ReturnType<typeof Template.prototype.toObject>;
    }): Form {
        const message = new Form({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.banner != null) {
            message.banner = data.banner;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.template != null) {
            message.template = Template.fromObject(data.template);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            banner?: string;
            description?: string;
            name?: string;
            template?: ReturnType<typeof Template.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.banner != null) {
            data.banner = this.banner;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.template != null) {
            data.template = this.template.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.banner.length)
            writer.writeString(2, this.banner);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.has_template)
            writer.writeMessage(5, this.template, () => this.template.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Form {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Form();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.banner = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.template, () => message.template = Template.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Form {
        return Form.deserialize(bytes);
    }
}
export class Template extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        fields?: FormFieldKind[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("fields" in data && data.fields != undefined) {
                this.fields = data.fields;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get fields() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as FormFieldKind[];
    }
    set fields(value: FormFieldKind[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        fields?: FormFieldKind[];
    }): Template {
        const message = new Template({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.fields != null) {
            message.fields = data.fields;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            fields?: FormFieldKind[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.fields != null) {
            data.fields = this.fields;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.fields.length)
            writer.writePackedEnum(2, this.fields);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Template {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Template();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.fields = reader.readPackedEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Template {
        return Template.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedFormsService {
    static definition = {
        getForm: {
            path: "/Forms/getForm",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetFormParams) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetFormParams.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Form) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Form.deserialize(new Uint8Array(bytes))
        },
        submitForm: {
            path: "/Forms/submitForm",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: FormSubmission) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => FormSubmission.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: FormSubmissionResult) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => FormSubmissionResult.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract getForm(call: grpc_1.ServerUnaryCall<GetFormParams, Form>, callback: grpc_1.sendUnaryData<Form>): void;
    abstract submitForm(call: grpc_1.ServerUnaryCall<FormSubmission, FormSubmissionResult>, callback: grpc_1.sendUnaryData<FormSubmissionResult>): void;
}
export class FormsClient extends grpc_1.makeGenericClientConstructor(UnimplementedFormsService.definition, "Forms", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    getForm: GrpcPromiseServiceInterface<GetFormParams, Form> = (message: GetFormParams, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<Form> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getForm(message, metadata, options, (error: grpc_1.ServiceError, response: Form) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    submitForm: GrpcPromiseServiceInterface<FormSubmission, FormSubmissionResult> = (message: FormSubmission, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<FormSubmissionResult> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.submitForm(message, metadata, options, (error: grpc_1.ServiceError, response: FormSubmissionResult) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
