/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: discord-bot/announcer.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class AnnounceFormRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        channelId?: string;
        guildId?: string;
        formId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("channelId" in data && data.channelId != undefined) {
                this.channelId = data.channelId;
            }
            if ("guildId" in data && data.guildId != undefined) {
                this.guildId = data.guildId;
            }
            if ("formId" in data && data.formId != undefined) {
                this.formId = data.formId;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channelId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set channelId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get guildId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set guildId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get formId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set formId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        message?: string;
        channelId?: string;
        guildId?: string;
        formId?: string;
    }): AnnounceFormRequest {
        const message = new AnnounceFormRequest({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.channelId != null) {
            message.channelId = data.channelId;
        }
        if (data.guildId != null) {
            message.guildId = data.guildId;
        }
        if (data.formId != null) {
            message.formId = data.formId;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            channelId?: string;
            guildId?: string;
            formId?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.channelId != null) {
            data.channelId = this.channelId;
        }
        if (this.guildId != null) {
            data.guildId = this.guildId;
        }
        if (this.formId != null) {
            data.formId = this.formId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.channelId.length)
            writer.writeString(2, this.channelId);
        if (this.guildId.length)
            writer.writeString(3, this.guildId);
        if (this.formId.length)
            writer.writeString(4, this.formId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnnounceFormRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnnounceFormRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    message.channelId = reader.readString();
                    break;
                case 3:
                    message.guildId = reader.readString();
                    break;
                case 4:
                    message.formId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AnnounceFormRequest {
        return AnnounceFormRequest.deserialize(bytes);
    }
}
export class AnnounceFormResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        success?: boolean;
    }): AnnounceFormResult {
        const message = new AnnounceFormResult({});
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnnounceFormResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnnounceFormResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AnnounceFormResult {
        return AnnounceFormResult.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedAnnouncerService {
    static definition = {
        announceForm: {
            path: "/Announcer/announceForm",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AnnounceFormRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AnnounceFormRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AnnounceFormResult) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AnnounceFormResult.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract announceForm(call: grpc_1.ServerUnaryCall<AnnounceFormRequest, AnnounceFormResult>, callback: grpc_1.sendUnaryData<AnnounceFormResult>): void;
}
export class AnnouncerClient extends grpc_1.makeGenericClientConstructor(UnimplementedAnnouncerService.definition, "Announcer", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    announceForm: GrpcPromiseServiceInterface<AnnounceFormRequest, AnnounceFormResult> = (message: AnnounceFormRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AnnounceFormResult> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.announceForm(message, metadata, options, (error: grpc_1.ServiceError, response: AnnounceFormResult) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
